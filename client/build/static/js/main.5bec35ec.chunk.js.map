{"version":3,"sources":["components/Nav/index.js","components/Jumbotron/index.js","components/SearchResults/index.js","utils/API.js","components/SearchBooks/index.js","components/SavedBooksResults/index.js","components/SavedBooks/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Jumbotron","SearchResults","props","console","log","books","useState","searchResults","setSearchResults","useEffect","length","map","currentbook","index","key","volumeInfo","imageLinks","smallThumbnail","title","previewLink","role","target","rel","onClick","addBook","axios","post","authors","src","alt","description","get","SearchBooks","setBooks","placeholder","event","searchItem","document","getElementById","value","API","then","obj","data","items","SavedBooksResults","class","SavedBooks","App","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bec35ec.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Nav() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"/\">Google Books</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"/\">Search<span className=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/savedbooks\">Saved Books</a>\n                    </li>\n\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default Nav;\n\n\n\n\n","\nimport React from \"react\";\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron col-9 mx-auto mt-5\">\n            <h1 className=\"display-4\">Hello, welcome to Google Book Search!</h1>\n            <p className=\"lead\">This react app allows you to search and save books of interest.</p>\n        </div>\n    );\n}\n\nexport default Jumbotron;\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios';\n\n\n// API.saveBook(searchItem).then(function (obj) {\n//     setBooks(obj.data.items);\n\n\nfunction SearchResults(props) {\n    console.log(props.books)\n    const [searchResults, setSearchResults] = useState([]);\n\n    // console.log(obj.data.items[0].volumeInfo.title);\n    // console.log(obj.data.items[0].volumeInfo.authors);\n    // console.log(obj.data.items[0].volumeInfo.description);\n    // console.log(obj.data.items[0].volumeInfo.imageLinks.smallThumbnail);\n    // console.log(obj.data.items[0].id\n    useEffect(() => {\n        setSearchResults(props.books)\n    }, [props.books])\n\n    const addBook = (id) => {\n        axios.post('/api/books', searchResults[id]);\n        console.log(searchResults[id])\n    }\n\n    return (\n        <div >\n            {props.books.length ? (\n                <div>\n                    {props.books.map((currentbook, index) => {\n                        return (\n                            <div key={currentbook.volumeInfo.imageLinks.smallThumbnail}>\n                                <div className=\"card col-9 mx-auto mt-3\">\n                                    <div className=\"card-body\">\n                                        <div className=\"d-flex justify-content-between\">\n                                            <h5 className=\"card-title\">{currentbook.volumeInfo.title}</h5>\n                                            <div className=\"d-flex justify-content-end\">\n                                                <a className=\"btn btn-light\" href={currentbook.volumeInfo.previewLink} role=\"button\" target=\"_blank\" rel=\"noopener noreferrer\">View</a>\n                                                <button type=\"button\" className=\"btn btn-success ml-1\" id={currentbook.id} onClick={() => addBook(index)}>Save</button></div>\n\n                                        </div>\n                                        <h6 className=\"card-subtitle mb-2 text-muted\">{currentbook.volumeInfo.authors}</h6>\n                                        <div className=\"d-flex\">\n                                            <div className=\"mt-3 mr-3\">\n                                                <img src={currentbook.volumeInfo.imageLinks.smallThumbnail} alt=\"book_logo\" ></img> </div>\n                                            <p className=\"card-text ml-2\">{currentbook.volumeInfo.description}</p>\n                                        </div>\n                                    </div>\n                                </div >\n\n                            </div>\n                        );\n                    })}\n                </div>\n            ) : (\n                    <h3 className=\"col-9 mx-auto mt-3\">No Results to Display</h3>\n                )}\n        </div>\n    );\n}\n\nexport default SearchResults;","import axios from \"axios\";\n\nexport default {\n  // Gets all books\n  getBooks: function () {\n    return axios.get(\"/api/books\");\n  },\n  // Gets the book with the given id\n  getBook: function (id) {\n    return axios.get(\"/api/books/\" + id);\n  },\n  // Deletes the book with the given id\n  deleteBook: function (id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a book to the database\n  saveBook: function (bookData) {\n    return axios.post(\"/api/books\", bookData);\n  },\n  getTitle: function (title) {\n    return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + title + \"&key=AIzaSyA1KdcgL8_HtATiFE3m00pUXvotEV-n1BI\");\n\n  }\n};\n\n","\nimport SearchResults from \"../SearchResults/index\";\nimport API from \"../../utils/API\";\nimport React, { useState } from \"react\";\n\n\n\nfunction SearchBooks() {\n    // event.preventDefault();\n    const [books, setBooks] = useState([])\n    const handleOnInputChange = (event) => {\n\n        const searchItem = document.getElementById(\"searchInput\").value;\n        console.log(searchItem)\n\n        API.getTitle(searchItem).then(function (obj) {\n            setBooks(obj.data.items);\n\n        })\n    }\n\n    return (\n        <div>\n            <form className=\"form-group d-flex mx-5 mt-2 justify-content-center\">\n\n                <input type=\"text\"\n                    // value={this.state.search}\n                    className=\"form-control col-6\"\n                    placeholder=\"Book Title\"\n                    id=\"searchInput\"\n                />\n                <button type=\"button\" className=\"btn btn-outline-primary ml-3\" onClick={handleOnInputChange}>Search</button>\n            </form>\n            <h4 className=\"col-9 mx-auto mt-3\">Results:</h4>\n            <SearchResults books={books} />\n        </div>\n\n    );\n}\n\nexport default SearchBooks;\n\n\n","import React from \"react\";\n// import \"./style.css\";\n// import searchItem from \"../Search/index\"\n// import { image } from \"../../../../models\";\n\nfunction SavedBooksResults() {\n    return (\n        <div className=\"card col-9 mx-auto mt-3\">\n            <div className=\"card-body\">\n                <div className=\"d-flex justify-content-between\">\n                    <h5 className=\"card-title\">Card title</h5>\n                    <div className=\"d-flex justify-content-end\">\n                        <button type=\"button\" class=\"btn btn-light mr-1\">View</button>\n                        <button type=\"button\" class=\"btn btn-danger ml-1\">Delete</button></div>\n                </div>\n                <h6 className=\"card-subtitle mb-2 text-muted\">Card subtitle</h6>\n                <div>\n                    {/* <img src={image} alt=\"book_logo\" ></img> */}\n                    <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n                </div>\n            </div>\n        </div >\n\n    );\n}\n\nexport default SavedBooksResults;","import React from \"react\";\nimport SavedBooksResults from \"../SavedBooksResults\"\nfunction SavedBooks() {\n    return (\n        <div>\n            <h4 className=\"col-9 mx-auto\">Saved Books:</h4>\n            <SavedBooksResults />\n        </div>\n\n    );\n}\n\nexport default SavedBooks;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// import Books from \"./pages/Books\";\nimport Nav from \"./components/Nav\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport SearchBooks from \"./components/SearchBooks\";\nimport SavedBooks from \"./components/SavedBooks\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Jumbotron />\n        <Switch>\n          <Route exact path=\"/\" component={SearchBooks} />\n          <Route exact path=\"/savedbooks\" component={SavedBooks} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}